<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ys.community.dao.UserMapper">
<!--定一个sql标签可以重复复用  id便于引用-->
    <sql id="selectFields">
        id,username,password,salt,email,type,status,activation_code,header_url,create_time
    </sql>

    <sql id="insertFields">
        username,password,salt,email,type,status,activation_code,header_url,create_time
    </sql>

<!--id值为UserMapper文件中所对应的方法名
所以Mybatis知道这个标签是为那个方法服务的
resultType 这是一个查询，查询出来对应的类型结果是-->
   <select id="selectById" resultType="User">
    select <include refid="selectFields" ></include>
    from user
    where id=#{id} <!--  #{id}引入UserMapper文件中的参数-->
</select>

    <select id="selectByName" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where username=#{username} <!--  #{id}引入UserMapper文件中的参数-->
    </select>

    <select id="selectByEmail" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where email=#{email} <!--  #{id}引入UserMapper文件中的参数-->
    </select>
<!--增加数据时 有参数
如果是基本类型可以直接引用
如果是复杂类型 比如User 需要提前用parameterType声明
insert中不要写id 因为是自动生成的
-->
    <insert id="insertUser" parameterType="User" keyProperty="id">
        insert into user(<include refid="insertFields"></include>)
        values(#{username},#{password},#{salt},#{email},#{type},#{status},#{activationCode},#{headerUrl},#{createTime})
    </insert>

<!--insert update 返回的数据固定都是整形
不需要声明返回数据类型
通常声明参数类型
又因为这参数简单所以不用声明-->
    <update id="updateStatus">
        update user set status=#{status} where id=#{id}
    </update>
    <update id="updateHeader">
        update user set header_url=#{headerUrl} where id=#{id}
    </update>
    <update id="updatePassword">
        update user set password=#{password} where id=#{id}
    </update>
</mapper>